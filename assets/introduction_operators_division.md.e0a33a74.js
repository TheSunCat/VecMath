import{_ as a,c as n,o as s,a as e}from"./app.8c51f311.js";const b='{"title":"Division","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/operators/division.md","lastUpdated":1676884101000}',p={},o=e(`<h1 id="division" tabindex="-1">Division <a class="header-anchor" href="#division" aria-hidden="true">#</a></h1><p>With the division operator we can already provide a nice example of normalizing a vector.</p><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> ma<span class="token operator">=</span><span class="token operator">|</span>a<span class="token operator">|</span>
vecmath<span class="token operator">&gt;</span> print ma
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The result of the length of the vector is:</p><div class="language-cpp line-numbers-mode"><pre><code>ma <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>We can now normalize by deviding the vector a with its length:</p><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> an<span class="token operator">=</span>a<span class="token operator">/</span>ma
vecmath<span class="token operator">&gt;</span> print an
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Giving the result:</p><div class="language-cpp line-numbers-mode"><pre><code>an <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.28</span><span class="token punctuation">,</span><span class="token number">0.96</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>The normalization can off course be done in one step:</p><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> an<span class="token operator">=</span>a<span class="token operator">/</span><span class="token operator">|</span>a<span class="token operator">|</span>
vecmath<span class="token operator">&gt;</span> print an
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The same methodology can be used to normalize a 3D vector.</p>`,12),t=[o];function r(c,i,l,d,u,m){return s(),n("div",null,t)}var k=a(p,[["render",r]]);export{b as __pageData,k as default};
