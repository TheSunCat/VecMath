import{_ as n,c as a,o as s,a as e}from"./app.8c51f311.js";const m='{"title":"Functions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Trigonometric functions","slug":"trigonometric-functions"},{"level":2,"title":"cosine","slug":"cosine"},{"level":2,"title":"sine","slug":"sine"},{"level":2,"title":"tangent","slug":"tangent"},{"level":2,"title":"Arc functions","slug":"arc-functions"},{"level":2,"title":"Arc cosine","slug":"arc-cosine"}],"relativePath":"introduction/functions/functions.md","lastUpdated":1676884101000}',t={},p=e(`<h1 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h1><p>Functions are used in a syntax that resembles C++, but with one important distinction that the function is applied to all the components in a vector or quaternion.</p><ul><li><p>sin, cos and tan: The sine, cosine and tangent function. These functions work with radians.</p></li><li><p>sind, cosd and tand: The sine, cosine and tangent function. These functions work with degrees as input.</p></li><li><p>asin,acos and atan: The arcsine, arc cosine and arc tangent functions. These formulas return an angle in <strong>radians</strong>. Undefined behaviour when the variable is not in the range [-1,1].</p></li><li><p>asind,acosd and atand: The arcsine, arc cosine and arc tangent functions. These formulas return an angle in <strong>degrees</strong>. Undefined behaviour when the variable is not in the range [-1,1].</p></li><li><p>sqrt: Calculates the square root of a variable.</p></li><li><p>norm : calculate the length of a vector, alternative for the | | notation.</p></li><li><p>abs : calculates the absolute value of all the components.</p></li><li><p>con : calculates the conjugate of a quaternion or complex number.</p></li><li><p>inv : calculates the inverse of a variable. For a scalar this is 1/x, for a 2d vector [1/x,1/y], for a complex number or quaternion this is the actual inverse.</p></li><li><p>angle : analyzes the rotation angle of a quaternion, returns the result in radians.</p></li><li><p>angled : anaylyzes the rotaiton angle of a quaternion, returns the result in degrees.</p></li><li><p>axis : analyzes the rotation axis of a quaternion, returns the result as a 3D vector.</p></li><li><p>rad2deg: Converts a variable from radians to degrees.</p></li><li><p>deg2rad: Converts a variable from degrees to radians.</p></li></ul><h2 id="trigonometric-functions" tabindex="-1">Trigonometric functions <a class="header-anchor" href="#trigonometric-functions" aria-hidden="true">#</a></h2><p>The trigonometric functions work on scalars, but also on 2D and 3D vectors and quaternions. In the latter case the trigonometric function is applied to all the components in the vector or quaternion, and in the case of a scalar, just the one value. The constant Pi,PI or pi is off course defined to be the well known mathematical constant.</p><h2 id="cosine" tabindex="-1">cosine <a class="header-anchor" href="#cosine" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> a<span class="token operator">=</span><span class="token punctuation">[</span>Pi<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span>Pi<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span>Pi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> ca<span class="token operator">=</span><span class="token function">cos</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
vecmath<span class="token operator">&gt;</span> print ca
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This results in the application of the cosine function on all the elements of the vector a:</p><div class="language-cpp line-numbers-mode"><pre><code>ca <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.707107</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4.37114e-08</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="sine" tabindex="-1">sine <a class="header-anchor" href="#sine" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> a<span class="token operator">=</span><span class="token punctuation">[</span>Pi<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span>Pi<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span>Pi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> sa<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
vecmath<span class="token operator">&gt;</span> print sa
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This results in the application of the cosine function on all the elements of the vector a:</p><div class="language-cpp line-numbers-mode"><pre><code>sa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.707107</span><span class="token punctuation">,</span><span class="token number">0.866025</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="tangent" tabindex="-1">tangent <a class="header-anchor" href="#tangent" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> a<span class="token operator">=</span><span class="token punctuation">[</span>Pi<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span>Pi<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span>Pi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> ta<span class="token operator">=</span><span class="token function">tan</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
vecmath<span class="token operator">&gt;</span> print ta
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This results in the application of the tangent function on all the elements of the vector a. Remark the undefined behaviour for Pi/2 or 90 degrees.</p><div class="language-cpp line-numbers-mode"><pre><code>sa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.707107</span><span class="token punctuation">,</span><span class="token number">0.866025</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>The sine and cosine functions can now be used to create a quaternion which represents for example the left part of the \u2019sandwich\u2019 method:</p><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> q1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token function">cos</span><span class="token punctuation">(</span>Pi<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">sin</span><span class="token punctuation">(</span>Pi<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> print q1
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>With the following result:</p><div class="language-cpp line-numbers-mode"><pre><code>q1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span> <span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0.866025</span> <span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="arc-functions" tabindex="-1">Arc functions <a class="header-anchor" href="#arc-functions" aria-hidden="true">#</a></h2><p>The arc functions again work on scalars, vectors and quaternions. The function rad2deg can be used to convert the resulting radians values into degree, which are perhaps more intuitively understandable.</p><h2 id="arc-cosine" tabindex="-1">Arc cosine <a class="header-anchor" href="#arc-cosine" aria-hidden="true">#</a></h2><p>The illustrate the arc cosine, we use the well know formula to calculate the angle between two vectors:</p><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> v1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> v2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
vecmath<span class="token operator">&gt;</span> angleRad<span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>v2<span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">|</span>v1<span class="token operator">|</span><span class="token operator">*</span><span class="token operator">|</span>v2<span class="token operator">|</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
vecmath<span class="token operator">&gt;</span> print angleRad
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The result in radians is:</p><div class="language-cpp line-numbers-mode"><pre><code>angleRad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.225726</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>To convert to degrees we use the rad2deg function:</p><div class="language-cpp line-numbers-mode"><pre><code>vecmath<span class="token operator">&gt;</span> angleDegrees <span class="token operator">=</span> <span class="token function">rad2deg</span><span class="token punctuation">(</span>angleRad<span class="token punctuation">)</span>
vecmath<span class="token operator">&gt;</span> print angleDegrees
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>With the following result:</p><div class="language-cpp line-numbers-mode"><pre><code>angleDegrees <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12.9332</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div>`,32),o=[p];function c(r,i,l,u,d,k){return s(),a("div",null,o)}var b=n(t,[["render",c]]);export{m as __pageData,b as default};
